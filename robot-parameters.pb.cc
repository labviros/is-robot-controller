// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot-parameters.proto

#include "robot-parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace is {
namespace robot {
class FenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fence>
      _instance;
} _Fence_default_instance_;
class ParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parameters>
      _instance;
} _Parameters_default_instance_;
}  // namespace robot
}  // namespace is
namespace protobuf_robot_2dparameters_2eproto {
void InitDefaultsFenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::is::robot::_Fence_default_instance_;
    new (ptr) ::is::robot::Fence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::is::robot::Fence::InitAsDefaultInstance();
}

void InitDefaultsFence() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFenceImpl);
}

void InitDefaultsParametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_robot_2dparameters_2eproto::InitDefaultsFence();
  {
    void* ptr = &::is::robot::_Parameters_default_instance_;
    new (ptr) ::is::robot::Parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::is::robot::Parameters::InitAsDefaultInstance();
}

void InitDefaultsParameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParametersImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Fence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Fence, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Fence, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Fence, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Fence, y_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Parameters, center_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Parameters, speed_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Parameters, gains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::robot::Parameters, fence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::is::robot::Fence)},
  { 9, -1, sizeof(::is::robot::Parameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::is::robot::_Fence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::is::robot::_Parameters_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "robot-parameters.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026robot-parameters.proto\022\010is.robot\"C\n\005Fe"
      "nce\022\r\n\005x_min\030\001 \001(\002\022\r\n\005x_max\030\002 \001(\002\022\r\n\005y_m"
      "in\030\003 \001(\002\022\r\n\005y_max\030\004 \001(\002\"h\n\nParameters\022\025\n"
      "\rcenter_offset\030\001 \001(\002\022\024\n\014speed_limits\030\002 \003"
      "(\002\022\r\n\005gains\030\003 \003(\002\022\036\n\005fence\030\004 \001(\0132\017.is.ro"
      "bot.FenceB\020\n\014com.is.robotP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot-parameters.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robot_2dparameters_2eproto
namespace is {
namespace robot {

// ===================================================================

void Fence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fence::kXMinFieldNumber;
const int Fence::kXMaxFieldNumber;
const int Fence::kYMinFieldNumber;
const int Fence::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fence::Fence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_robot_2dparameters_2eproto::InitDefaultsFence();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.robot.Fence)
}
Fence::Fence(const Fence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  // @@protoc_insertion_point(copy_constructor:is.robot.Fence)
}

void Fence::SharedCtor() {
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _cached_size_ = 0;
}

Fence::~Fence() {
  // @@protoc_insertion_point(destructor:is.robot.Fence)
  SharedDtor();
}

void Fence::SharedDtor() {
}

void Fence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fence::descriptor() {
  ::protobuf_robot_2dparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2dparameters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fence& Fence::default_instance() {
  ::protobuf_robot_2dparameters_2eproto::InitDefaultsFence();
  return *internal_default_instance();
}

Fence* Fence::New(::google::protobuf::Arena* arena) const {
  Fence* n = new Fence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fence::Clear() {
// @@protoc_insertion_point(message_clear_start:is.robot.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _internal_metadata_.Clear();
}

bool Fence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.robot.Fence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.robot.Fence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.robot.Fence)
  return false;
#undef DO_
}

void Fence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.robot.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_min(), output);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_max(), output);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_min(), output);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.robot.Fence)
}

::google::protobuf::uint8* Fence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.robot.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_min(), target);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_max(), target);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_min(), target);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.robot.Fence)
  return target;
}

size_t Fence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.robot.Fence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 + 4;
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    total_size += 1 + 4;
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    total_size += 1 + 4;
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.robot.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  const Fence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.robot.Fence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.robot.Fence)
    MergeFrom(*source);
  }
}

void Fence::MergeFrom(const Fence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.robot.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
}

void Fence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.robot.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fence::CopyFrom(const Fence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.robot.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fence::IsInitialized() const {
  return true;
}

void Fence::Swap(Fence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fence::InternalSwap(Fence* other) {
  using std::swap;
  swap(x_min_, other->x_min_);
  swap(x_max_, other->x_max_);
  swap(y_min_, other->y_min_);
  swap(y_max_, other->y_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fence::GetMetadata() const {
  protobuf_robot_2dparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2dparameters_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Parameters::InitAsDefaultInstance() {
  ::is::robot::_Parameters_default_instance_._instance.get_mutable()->fence_ = const_cast< ::is::robot::Fence*>(
      ::is::robot::Fence::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameters::kCenterOffsetFieldNumber;
const int Parameters::kSpeedLimitsFieldNumber;
const int Parameters::kGainsFieldNumber;
const int Parameters::kFenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameters::Parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_robot_2dparameters_2eproto::InitDefaultsParameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.robot.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speed_limits_(from.speed_limits_),
      gains_(from.gains_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence()) {
    fence_ = new ::is::robot::Fence(*from.fence_);
  } else {
    fence_ = NULL;
  }
  center_offset_ = from.center_offset_;
  // @@protoc_insertion_point(copy_constructor:is.robot.Parameters)
}

void Parameters::SharedCtor() {
  ::memset(&fence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_offset_) -
      reinterpret_cast<char*>(&fence_)) + sizeof(center_offset_));
  _cached_size_ = 0;
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:is.robot.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  if (this != internal_default_instance()) delete fence_;
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  ::protobuf_robot_2dparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2dparameters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameters& Parameters::default_instance() {
  ::protobuf_robot_2dparameters_2eproto::InitDefaultsParameters();
  return *internal_default_instance();
}

Parameters* Parameters::New(::google::protobuf::Arena* arena) const {
  Parameters* n = new Parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:is.robot.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_limits_.Clear();
  gains_.Clear();
  if (GetArenaNoVirtual() == NULL && fence_ != NULL) {
    delete fence_;
  }
  fence_ = NULL;
  center_offset_ = 0;
  _internal_metadata_.Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.robot.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float center_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float speed_limits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speed_limits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_speed_limits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gains = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gains())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_gains())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.robot.Fence fence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.robot.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.robot.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.robot.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float center_offset = 1;
  if (this->center_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->center_offset(), output);
  }

  // repeated float speed_limits = 2;
  if (this->speed_limits_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _speed_limits_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->speed_limits().data(), this->speed_limits_size(), output);
  }

  // repeated float gains = 3;
  if (this->gains_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gains_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->gains().data(), this->gains_size(), output);
  }

  // .is.robot.Fence fence = 4;
  if (this->has_fence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fence_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.robot.Parameters)
}

::google::protobuf::uint8* Parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.robot.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float center_offset = 1;
  if (this->center_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->center_offset(), target);
  }

  // repeated float speed_limits = 2;
  if (this->speed_limits_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _speed_limits_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->speed_limits_, target);
  }

  // repeated float gains = 3;
  if (this->gains_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _gains_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gains_, target);
  }

  // .is.robot.Fence fence = 4;
  if (this->has_fence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->fence_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.robot.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.robot.Parameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float speed_limits = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_limits_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _speed_limits_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float gains = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->gains_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gains_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .is.robot.Fence fence = 4;
  if (this->has_fence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fence_);
  }

  // float center_offset = 1;
  if (this->center_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.robot.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.robot.Parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.robot.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.robot.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_limits_.MergeFrom(from.speed_limits_);
  gains_.MergeFrom(from.gains_);
  if (from.has_fence()) {
    mutable_fence()->::is::robot::Fence::MergeFrom(from.fence());
  }
  if (from.center_offset() != 0) {
    set_center_offset(from.center_offset());
  }
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.robot.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.robot.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  speed_limits_.InternalSwap(&other->speed_limits_);
  gains_.InternalSwap(&other->gains_);
  swap(fence_, other->fence_);
  swap(center_offset_, other->center_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_robot_2dparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_2dparameters_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot
}  // namespace is

// @@protoc_insertion_point(global_scope)
